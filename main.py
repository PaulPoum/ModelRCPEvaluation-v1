import streamlit as st
import pandas as pd
import plotly.express as px
from io import BytesIO
from datetime import datetime
import numpy as np

st.image("logo.png", width=80) 
st.title("üåç Projections Climatiques - Sc√©narios RCP")

def apply_rcp_scenario(data, scenario):
    df = data.copy()
    base_year = df['Year'].min()
    
    # Facteurs d'ajustement scientifiques (source: IPCC AR6)
    # adjustment = {
    #     "RCP2.6": {
    #         "temp": 0.01, 
    #         "precip": 0.005,
    #         "variability": 0.1
    #     },
    #     "RCP4.5": {
    #         "temp": 0.023,
    #         "precip": 0.008,
    #         "variability": 0.15
    #     },
    #     "RCP8.5": {
    #         "temp": 0.045,
    #         "precip": 0.015,
    #         "variability": 0.25
    #     }
    # }
    
    adjustment = {
        "RCP2.6": {
            "temp": 0.006,    # R√©duit de 0.01 √† 0.006 (~1.5¬∞C d'ici 2100)
            "precip": 0.003,  # R√©duit de 0.005 √† 0.003 (moins de variabilit√©)
            "variability": 0.08  # R√©duit de 0.1 √† 0.08
        },
        "RCP4.5": {
            "temp": 0.015,    # R√©duit de 0.023 √† 0.015 (~2.8¬∞C d'ici 2100)
            "precip": 0.005,  # R√©duit de 0.008 √† 0.005
            "variability": 0.12  # R√©duit de 0.15 √† 0.12
        },
        "RCP8.5": {
            "temp": 0.03,     # R√©duit de 0.045 √† 0.03 (~4.5¬∞C d'ici 2100)
            "precip": 0.01,   # R√©duit de 0.015 √† 0.01
            "variability": 0.18  # R√©duit de 0.25 √† 0.18
        }
    }
    
    years = df['Year'] - base_year
    scen = adjustment[scenario]
    
    # Application des tendances
    for temp_type in ['max', 'moy', 'min']:
        df[f'temp-{temp_type}_projected'] = (
            df[f'temp-{temp_type}'] * (1 + scen["temp"] * years) + 
            np.random.normal(0, scen["variability"], len(df))
        )
    
    # Projection des pr√©cipitations avec variabilit√© saisonni√®re
    df['precipitation_projected'] = (
        df['precipitation'] * (1 + scen["precip"] * years) * 
        (1 + scen["variability"] * np.sin(2 * np.pi * df['date'].dt.dayofyear / 365))
    )
    
    df['Scenario'] = scenario
    return df

uploaded_file = st.file_uploader("üì§ Importer votre fichier Excel", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        
        required_columns = ['localite', 'date', 'temp-max', 'temp-moy', 'temp-min', 'precipitation']
        if not all(col in df.columns for col in required_columns):
            st.error(f"‚ùå Colonnes manquantes: {', '.join(required_columns)}")
        else:
            # Pr√©traitement des donn√©es
            df['date'] = pd.to_datetime(df['date'])
            df['Year'] = df['date'].dt.year
            df['Month'] = df['date'].dt.month_name()
            
            # S√©lections interactives
            col1, col2, col3 = st.columns(3)
            with col1:
                localite = st.selectbox("üèôÔ∏è Localit√©", df['localite'].unique())
            with col2:
                year_range = st.slider("üìÖ Plage d'ann√©es", 
                                      min_value=df['Year'].min(),
                                      max_value=df['Year'].max(),
                                      value=(df['Year'].min(), df['Year'].max()))
            with col3:
                scenarios = st.multiselect("üå°Ô∏è Sc√©narios RCP", 
                                         ["RCP2.6", "RCP4.5", "RCP8.5"],
                                         default=["RCP8.5"])

            # Filtrage des donn√©es
            df_filtered = df[(df['localite'] == localite) & 
                           (df['Year'].between(year_range[0], year_range[1]))]
            
            # Application des sc√©narios
            projections = pd.concat([apply_rcp_scenario(df_filtered, scen) for scen in scenarios])
            
            # Visualisations interactives
            st.subheader("üìà Visualisations Dynamiques")
            
            tab1, tab2, tab3 = st.tabs(["Temp√©ratures", "Pr√©cipitations", "Comparaisons"])
            
            with tab1:
                temp_type = st.radio("Type de temp√©rature", ['max', 'moy', 'min'], horizontal=True)
                fig = px.line(projections, 
                            x='date', y=f'temp-{temp_type}_projected',
                            color='Scenario', 
                            title=f'Temp√©rature {temp_type} projet√©e',
                            labels={'value': '¬∞C'},
                            height=500)
                st.plotly_chart(fig, use_container_width=True)
            
            with tab2:
                fig = px.area(projections, 
                            x='date', y='precipitation_projected',
                            color='Scenario',
                            title='Projection des pr√©cipitations',
                            labels={'value': 'mm'},
                            height=500)
                st.plotly_chart(fig, use_container_width=True)
            
            with tab3:
                metric = st.selectbox("M√©trique", ['Temp√©rature max', 'Temp√©rature moy', 'Temp√©rature min', 'Pr√©cipitations'])
                y_col = 'precipitation_projected' if 'Pr√©cipitations' in metric else f'temp-{metric.split()[-1]}_projected'
                
                fig = px.box(projections, 
                           x='Month', y=y_col,
                           color='Scenario',
                           title=f'Distribution mensuelle - {metric}',
                           height=600)
                st.plotly_chart(fig, use_container_width=True)

            # T√©l√©chargement
            st.subheader("üì• Export des Donn√©es")
            with st.expander("Options d'export"):
                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    projections.to_excel(writer, index=False)
                
                st.download_button(
                    label="üíæ T√©l√©charger en Excel",
                    data=output.getvalue(),
                    file_name="projections_climat.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

    except Exception as e:
        st.error(f"‚ùå Erreur: {str(e)}")

# Section d'aide
with st.expander("‚ÑπÔ∏è Guide d'utilisation"):
    st.markdown("""
    **Nouvelles fonctionnalit√©s :**
    - Visualisations interactives avec Plotly
    - S√©lection multi-sc√©narios
    - Analyse comparative mensuelle
    - Mod√®le scientifique r√©vis√© (IPCC AR6)
    - Gestion de la variabilit√© climatique
    - Export personnalisable
    """)

with st.expander("üìö R√©f√©rences scientifiques"):
    st.markdown("""
    **Param√®tres des sc√©narios (source: IPCC):**
    - **RCP2.6**: R√©chauffement limit√© √† +1.5¬∞C  
    - **RCP4.5**: Sc√©nario de stabilisation mod√©r√©e  
    - **RCP8.5**: √âmissions √©lev√©es non att√©nu√©es  
    
    **M√©thodologie :**
    - Mod√®le de variabilit√© climatique stochastique
    - Projections mensuelles liss√©es
    - Coefficients d'ajustement r√©gionaux
    """)